{"ast":null,"code":"import axios from\"axios\";import React,{useState}from\"react\";import{useNavigate}from'react-router-dom';import AddressSearch from\"./AddressSearch\";import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const MemberSignUp=()=>{const[memberId,setMemberId]=useState(\"\");const[memberPw,setMemberPw]=useState(\"\");const[memberPwCheck,setMemberPwCheck]=useState(\"\");const[memberName,setMemberName]=useState(\"\");const[memberAge,setMemberAge]=useState(\"\");const[memberGender,setMemberGender]=useState(\"\");const[memberBirth,setMemberBirth]=useState(\"\");const[memberEmail,setMemberEmail]=useState(\"\");const[memberAddress,setMemberAddress]=useState(\"\");const[memberPhone,setMemberPhone]=useState(\"\");const[emailPlug,setEmailPlug]=useState(null);// 이름 한국어 or 영어\nconst[inputType,setInputType]=useState(\"none\");// 정규식\nconst idRegex=/^[a-zA-Z0-9]{8,15}$/;const passwordRegex=/^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;const nameRegex=/^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;const consonantVowelRegex=/^[ㄱ-ㅎㅏ-ㅣ]+$/;const phoneRegex=/^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;// 주민등록번호 7자리 정규식\nconst birthRegex=/^\\d{6}-[1-4]$/;// ID 중복 검사 변수\nconst[memberIdValidation,setMemberIdValidation]=useState(false);const navigate=useNavigate();// useNavigate 훅 호출\n// 주소 핸들러\nconst handleAddressChange=address=>{setMemberAddress(address);};// 이름 핸들러\nconst nameHandleChange=e=>{const value=e.target.value;const firstChar=value.charAt(0);// 첫 번째 문자에 따라 입력 타입 설정\nif(/^[ㄱ-힇]$/.test(firstChar)){setInputType(\"korean\");}else if(/^[a-zA-Z]$/.test(firstChar)){setInputType(\"english\");}// 입력 타입에 맞게 값 필터링\nif(inputType===\"korean\"&&/^[ㄱ-힣]*$/.test(value)){setMemberName(value);}else if(inputType===\"english\"&&/^[a-zA-Z]*$/.test(value)){setMemberName(value);}else if(inputType===\"none\"){setMemberName(value);// 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\n}};// 비밀번호 입력시 <p> 태그 활용하기 위해서 \nconst isPasswordValid=passwordRegex.test(memberPw)&&passwordRegex.test(memberPwCheck);const arePasswordsMatching=memberPw===memberPwCheck;const isInputFilled=memberPw&&memberPwCheck;// *****************************************전화번호 형식 ********************************************\nconst formatPhoneNumber=value=>{const cleanedPhone=value.replace(/\\D/g,'');if(cleanedPhone.length<=3){return cleanedPhone;}if(cleanedPhone.length<=7){return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3)}`;}return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3,7)}-${cleanedPhone.slice(7,11)}`;};// 전화번호 핸들러\nconst phoneHandleChange=e=>{const formattedPhoneNumber=formatPhoneNumber(e.target.value);setMemberPhone(formattedPhoneNumber);};// *******************************************************************************************************\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\n// 날짜 유효성 검사 함수\nconst isDateValid=birthDate=>{const[datePart,genderPart]=birthDate.split('-');// 날짜 부분이 올바른지 확인\nif(datePart.length!==6||!/^\\d{6}$/.test(datePart)||!/^[1-4]$/.test(genderPart)){return false;}// 연도, 월, 일 추출\nconst yy=parseInt(datePart.slice(0,2),10);const mm=parseInt(datePart.slice(2,4),10);const dd=parseInt(datePart.slice(4,6),10);// YY를 YYYY로 변환\nconst year=yy>=0&&yy<=99?yy<30?2000+yy:1900+yy:yy;// 월과 일 유효성 검사\nif(mm<1||mm>12)return false;// 월이 1~12 사이인지 확인\n// 월에 따라 일자 유효성 검사\nconst daysInMonth=new Date(year,mm,0).getDate();if(dd<1||dd>daysInMonth)return false;// 일자가 월의 일수 범위 내인지 확인\nreturn true;};// ----------------------------------------------------------------------------------------------------------------------------------------\n//*************************************** 나이 계산 함수 *******************************************\nconst calculateAge=birthDate=>{const[year,month,day]=[birthDate.slice(0,4),birthDate.slice(4,6),birthDate.slice(6,8)];const birthYear=parseInt(year,10);const currentYear=new Date().getFullYear();const age=currentYear-birthYear;return age;};// -------------------------------------- 성별 추출 함수 ----------------------------------------------\nconst getGender=genderCode=>{switch(genderCode){case'1':case'3':return'Male';// 1900년대 남성 또는 2000년대 남성\ncase'2':case'4':return'Female';// 1900년대 여성 또는 2000년대 여성\ndefault:return'Unknown';}};// 입력값 처리 함수\nconst birthHandleChange=e=>{let value=e.target.value;// 숫자만 허용\nvalue=value.replace(/[^\\d]/g,'');// 하이픈 추가\nif(value.length>6){value=value.slice(0,6)+'-'+value.slice(6,7);}setMemberBirth(value);// 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\nif(/^\\d{6}-[1-4]$/.test(value)){const[datePart,genderPart]=value.split('-');const yearPrefix=genderPart==='1'||genderPart==='2'?'19':'20';const fullDate=yearPrefix+datePart;const age=calculateAge(fullDate);const gender=getGender(genderPart);setMemberAge(age);setMemberGender(gender);}else{setMemberAge('');setMemberGender('');}};/* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/const memberIdCheck=inputId=>{// inputId : 현재 입력한 ID 대입\nsetMemberId(inputId);// 비동기로 아이디 중복 검사 수행\nfetch(\"memberIdCheck?id=\"+inputId)// url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\n.then(resp=>resp.text()).then(result=>{// 중복이 아닐 때 true, 중복이면 false\nif(Number(result)===0)setMemberIdValidation(true);else setMemberIdValidation(false);});};// -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\nconst duplicationIdCheck=()=>{if(!memberId.trim()){alert(\"아이디를 입력해주세요.\");return;}if(consonantVowelRegex.test(memberId)){alert(\"올바른 형식으로 입력해주세요.\");setMemberIdValidation(false);return;}if(memberId.length<8||memberId.length>15){alert(\"올바르지 않은 형식입니다.\");return;}if(memberIdValidation){alert(\"사용 가능한 아이디입니다.\");}else{alert(\"중복 되는 아이디가 존재합니다.\");return;}};const emailHandleChange=e=>{setMemberEmail(e.target.value);};// *******************************************************************************************************************************************************************************\n/* 이메일 중복 검사 */const emailCheck=()=>{// 이메일 입력 여부 확인\nif(memberEmail.length===0){alert(\"이메일을 입력해주세요.\");return;}// 이메일 중복 검사 요청\naxios.post(\"/memberEmailCheck?email=\"+memberEmail).then(response=>{// 중복 여부 판별\nif(Number(response.data)!==0){setEmailPlug(true);alert(\"중복되는 이메일이 존재합니다.\");}else{setEmailPlug(false);alert(\"사용 가능한 이메일입니다.\");}}).catch(err=>{alert(\"Error : \"+err);});};// ---------------------------------------------------------------------[!회원가입 버튼!]----------------------------------------------------------------------------------------------\nconst MemberSignUpButton=()=>{//아이디가 유효하지 않을 때 \nif(!memberIdValidation){alert(\"아이디 중복 검사를 확인 해주세요. \");return;}if(emailPlug===null){alert(\"이메일 중복 검사를 확인 해주세요.\");return;}// 비밀번호 공백 불가\nif(!memberPw||!memberPwCheck){alert(\"비밀번호를 입력해주세요.\");return;}// 비밀번호가 불일치\nif(memberPw!==memberPwCheck){alert(\"비밀번호가 일치하지 않습니다.\");return;}// 비밀번호 정규식\nif(!passwordRegex.test(memberPw)||!passwordRegex.test(memberPwCheck)){alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");return;}// 이름 공백 불가\nif(!memberName.trim()){alert(\"이름을 입력해주세요.\");return;}// 이름 정규식 \nif(!nameRegex.test(memberName)){alert(\"이름을 올바른 형식으로 입력해주세요.\");return;}// 주민번호 공백 불가\nif(!memberBirth.trim()){alert(\"생년월일을 입력해주세요.\");return;}// 주민번호 정규식 \nif(!birthRegex.test(memberBirth)){alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");return;}// 전화번호 공백 불가\nif(!memberPhone){alert(\"전화번호를 입력해주세요.\");return;}// 전화번호 정규식 \nif(!phoneRegex.test(memberPhone)){alert(\"전화번호를 올바른 형식으로 입력해주세요.\");return;}// 이메일 공백 불가\nif(!memberEmail.trim()){alert(\"이메일을 입력해주세요.\");return;}// 이메일 정규식\nif(!emailRegex.test(memberEmail)){alert(\"이메일이 형식을 올바르게 입력해주세요.\");return;}// **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\nconst memberInputInfo={};memberInputInfo.memberId=memberId;memberInputInfo.memberPw=memberPw;memberInputInfo.memberPwCheck=memberPwCheck;memberInputInfo.memberName=memberName;memberInputInfo.memberAge=memberAge;memberInputInfo.memberGender=memberGender;memberInputInfo.memberBirth=memberBirth;memberInputInfo.memberEmail=memberEmail;memberInputInfo.memberAddress=memberAddress;memberInputInfo.memberPhone=memberPhone;/*********************************************************************************************************************************************************************/// ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \nfetch(\"/memberSignUp\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(memberInputInfo)}).then(response=>response.text()).then(result=>{if(Number(result)>0){alert(\"회원 가입이 완료되었습니다.\");setMemberId(\"\");setMemberPw(\"\");setMemberPwCheck(\"\");setMemberName(\"\");setMemberAge(\"\");setMemberGender(\"\");setMemberBirth(\"\");setMemberEmail(\"\");setMemberAddress(\"\");setMemberPhone(\"\");navigate('/');}else{alert(\"회원 가입이 실패하였습니다.\");}});};// *************************************************************************************************************************************************************************************\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title-ID\",children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"login-container6\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberId,className:memberIdValidation?\"\":\"memberId-error\",onChange:e=>{memberIdCheck(e.target.value);},placeholder:\"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberId&&(idRegex.test(memberId)?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uC62C\\uBC14\\uB978 \\uD615\\uC2DD\\uC785\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"8 ~ 15 \\uC790 \\uC601\\uBB38 \\uB610\\uB294 \\uC22B\\uC790\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"})),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",onClick:duplicationIdCheck,children:\"\\uC544\\uC774\\uB514 \\uC911\\uBCF5 \\uD655\\uC778\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:memberPw,onChange:e=>setMemberPw(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:memberPwCheck,onChange:e=>setMemberPwCheck(e.target.value),placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC7AC \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),isInputFilled&&/*#__PURE__*/_jsx(_Fragment,{children:isPasswordValid&&arePasswordsMatching?/*#__PURE__*/_jsx(\"p\",{style:{color:\"green\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD569\\uB2C8\\uB2E4.\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[!arePasswordsMatching&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uAC00 \\uC77C\\uCE58\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"}),!isPasswordValid&&/*#__PURE__*/_jsx(\"p\",{style:{color:\"red\",margin:\"0\",fontSize:\"13px\"},children:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB294 10 ~ 15 \\uC790, \\uD2B9\\uC218\\uBB38\\uC790\\uB97C \\uD3EC\\uD568\\uD574\\uC57C \\uD569\\uB2C8\\uB2E4.\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberName,onChange:nameHandleChange,placeholder:\"\\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberName&&/*#__PURE__*/_jsx(\"p\",{style:{color:nameRegex.test(memberName)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:inputType===\"korean\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\":inputType===\"english\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"영어 5 ~ 15 글자 입력해주세요.\":\"언어: 한글 / 영어\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberBirth,onChange:birthHandleChange,placeholder:\"\\uC8FC\\uBBFC\\uBC88\\uD638 7\\uC790\\uB9AC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694 / (-) \\uC790\\uB3D9 \\uC0DD\\uC131\",required:true,maxLength:\"8\"// 하이픈 포함 최대 8자리\n}),memberBirth&&/*#__PURE__*/_jsx(\"p\",{style:{color:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?`올바른 형식입니다.`:\"형식이 올바르지 않습니다.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberPhone,onChange:phoneHandleChange,placeholder:\"\\uC804\\uD654\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberPhone&&/*#__PURE__*/_jsx(\"p\",{style:{color:phoneRegex.test(memberPhone)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:phoneRegex.test(memberPhone)?\"올바른 형식입니다.\":\"전화번호 010-****-****\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(AddressSearch,{onAddressChange:handleAddressChange})}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-value\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberEmail,onChange:emailHandleChange,placeholder:\"\\uC774\\uBA54\\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true}),memberEmail&&/*#__PURE__*/_jsx(\"p\",{style:{color:emailRegex.test(memberEmail)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:emailRegex.test(memberEmail)?\"올바른 형식입니다.\":\"유효한 이메일 주소를 입력해주세요.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",onClick:emailCheck,children:\"\\uC774\\uBA54\\uC77C \\uC911\\uBCF5 \\uD655\\uC778\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-dark\",onClick:MemberSignUpButton,children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})})]})]});};export default MemberSignUp;","map":{"version":3,"names":["axios","React","useState","useNavigate","AddressSearch","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MemberSignUp","memberId","setMemberId","memberPw","setMemberPw","memberPwCheck","setMemberPwCheck","memberName","setMemberName","memberAge","setMemberAge","memberGender","setMemberGender","memberBirth","setMemberBirth","memberEmail","setMemberEmail","memberAddress","setMemberAddress","memberPhone","setMemberPhone","emailPlug","setEmailPlug","inputType","setInputType","idRegex","passwordRegex","nameRegex","consonantVowelRegex","phoneRegex","emailRegex","birthRegex","memberIdValidation","setMemberIdValidation","navigate","handleAddressChange","address","nameHandleChange","e","value","target","firstChar","charAt","test","isPasswordValid","arePasswordsMatching","isInputFilled","formatPhoneNumber","cleanedPhone","replace","length","slice","phoneHandleChange","formattedPhoneNumber","isDateValid","birthDate","datePart","genderPart","split","yy","parseInt","mm","dd","year","daysInMonth","Date","getDate","calculateAge","month","day","birthYear","currentYear","getFullYear","age","getGender","genderCode","birthHandleChange","yearPrefix","fullDate","gender","memberIdCheck","inputId","fetch","then","resp","text","result","Number","duplicationIdCheck","trim","alert","emailHandleChange","emailCheck","post","response","data","catch","err","MemberSignUpButton","memberInputInfo","method","headers","body","JSON","stringify","children","className","type","onChange","placeholder","required","style","color","margin","fontSize","onClick","maxLength","onAddressChange"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/login/MemberSignUp.js"],"sourcesContent":["import axios from \"axios\";\r\nimport React, {useState} from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AddressSearch from \"./AddressSearch\";\r\nconst MemberSignUp = () => {\r\n    const [memberId, setMemberId] = useState(\"\");\r\n    const [memberPw, setMemberPw] = useState(\"\");\r\n    const [memberPwCheck, setMemberPwCheck] = useState(\"\");\r\n    const [memberName, setMemberName] = useState(\"\");\r\n    const [memberAge, setMemberAge] = useState(\"\");\r\n    const [memberGender, setMemberGender] = useState(\"\");\r\n    const [memberBirth, setMemberBirth] = useState(\"\");\r\n    const [memberEmail, setMemberEmail] = useState(\"\");\r\n    const [memberAddress, setMemberAddress] = useState(\"\");\r\n    const [memberPhone, setMemberPhone] = useState(\"\");\r\n    const [emailPlug, setEmailPlug] = useState(null);\r\n    // 이름 한국어 or 영어\r\n    const [inputType, setInputType] = useState(\"none\");\r\n\r\n    // 정규식\r\n    const idRegex = /^[a-zA-Z0-9]{8,15}$/ \r\n    const passwordRegex = /^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]{10,15}$/;\r\n    const nameRegex = /^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;\r\n    const consonantVowelRegex = /^[ㄱ-ㅎㅏ-ㅣ]+$/;  \r\n    const phoneRegex = /^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      // 주민등록번호 7자리 정규식\r\n    const birthRegex = /^\\d{6}-[1-4]$/;\r\n \r\n\r\n    \r\n    // ID 중복 검사 변수\r\n    const [memberIdValidation, setMemberIdValidation] = useState(false);\r\n\r\n    const navigate = useNavigate(); // useNavigate 훅 호출\r\n    \r\n    // 주소 핸들러\r\n    const handleAddressChange = (address) => {\r\n        setMemberAddress(address);\r\n      };\r\n    \r\n\r\n    // 이름 핸들러\r\n    const nameHandleChange = (e) => {\r\n        const value = e.target.value;\r\n        const firstChar = value.charAt(0);\r\n        // 첫 번째 문자에 따라 입력 타입 설정\r\n        if (/^[ㄱ-힇]$/.test(firstChar)) {\r\n            setInputType(\"korean\");\r\n        } else if (/^[a-zA-Z]$/.test(firstChar)) {\r\n            setInputType(\"english\");\r\n        }\r\n\r\n        // 입력 타입에 맞게 값 필터링\r\n        if (inputType === \"korean\" && /^[ㄱ-힣]*$/.test(value)) {\r\n            setMemberName(value);\r\n        } else if (inputType === \"english\" && /^[a-zA-Z]*$/.test(value)) {\r\n            setMemberName(value);\r\n        } else if (inputType === \"none\") {\r\n            setMemberName(value);  // 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\r\n        }\r\n    };\r\n        // 비밀번호 입력시 <p> 태그 활용하기 위해서 \r\n        const isPasswordValid = passwordRegex.test(memberPw) && passwordRegex.test(memberPwCheck);\r\n        const arePasswordsMatching = memberPw === memberPwCheck;\r\n        const isInputFilled = memberPw && memberPwCheck;\r\n\r\n       // *****************************************전화번호 형식 ********************************************\r\n       const formatPhoneNumber = (value) => {\r\n        const cleanedPhone = value.replace(/\\D/g, '');\r\n        \r\n        if (cleanedPhone.length <= 3) {\r\n            return cleanedPhone;\r\n        }\r\n        if (cleanedPhone.length <= 7) {\r\n            return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3)}`;\r\n        }\r\n        return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3, 7)}-${cleanedPhone.slice(7, 11)}`;\r\n    };\r\n\r\n    // 전화번호 핸들러\r\n    const phoneHandleChange = (e) => {\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        setMemberPhone(formattedPhoneNumber);\r\n    };\r\n    // *******************************************************************************************************\r\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\r\n// 날짜 유효성 검사 함수\r\nconst isDateValid = (birthDate) => {\r\n    const [datePart, genderPart] = birthDate.split('-');\r\n    \r\n    // 날짜 부분이 올바른지 확인\r\n    if (datePart.length !== 6 || !/^\\d{6}$/.test(datePart) || !/^[1-4]$/.test(genderPart)) {\r\n        return false;\r\n    }\r\n    \r\n    // 연도, 월, 일 추출\r\n    const yy = parseInt(datePart.slice(0, 2), 10);\r\n    const mm = parseInt(datePart.slice(2, 4), 10);\r\n    const dd = parseInt(datePart.slice(4, 6), 10);\r\n    \r\n    // YY를 YYYY로 변환\r\n    const year = yy >= 0 && yy <= 99 ? (yy < 30 ? 2000 + yy : 1900 + yy) : yy;\r\n    \r\n    // 월과 일 유효성 검사\r\n    if (mm < 1 || mm > 12) return false; // 월이 1~12 사이인지 확인\r\n    \r\n    // 월에 따라 일자 유효성 검사\r\n    const daysInMonth = new Date(year, mm, 0).getDate();\r\n    if (dd < 1 || dd > daysInMonth) return false; // 일자가 월의 일수 범위 내인지 확인\r\n    \r\n    return true;\r\n};\r\n// ----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n//*************************************** 나이 계산 함수 *******************************************\r\nconst calculateAge = (birthDate) => {\r\n    const [year, month, day] = [birthDate.slice(0, 4), birthDate.slice(4, 6), birthDate.slice(6, 8)];\r\n    const birthYear = parseInt(year, 10);\r\n    const currentYear = new Date().getFullYear();\r\n    const age = currentYear - birthYear;\r\n    return age;\r\n};\r\n\r\n// -------------------------------------- 성별 추출 함수 ----------------------------------------------\r\nconst getGender = (genderCode) => {\r\n    switch (genderCode) {\r\n        case '1': case '3':\r\n            return 'Male'; // 1900년대 남성 또는 2000년대 남성\r\n        case '2': case '4':\r\n            return 'Female'; // 1900년대 여성 또는 2000년대 여성\r\n        default:\r\n            return 'Unknown';\r\n    }\r\n};\r\n     // 입력값 처리 함수\r\n     const birthHandleChange = (e) => {\r\n        let value = e.target.value;\r\n        \r\n        // 숫자만 허용\r\n        value = value.replace(/[^\\d]/g, '');\r\n        \r\n        // 하이픈 추가\r\n        if (value.length > 6) {\r\n            value = value.slice(0, 6) + '-' + value.slice(6, 7);\r\n        }\r\n        \r\n        setMemberBirth(value);\r\n        \r\n        // 주민등록번호가 올바른 형식일 경우에만 나이와 성별 계산\r\n        if (/^\\d{6}-[1-4]$/.test(value)) {\r\n            const [datePart, genderPart] = value.split('-');\r\n            const yearPrefix = genderPart === '1' || genderPart === '2' ? '19' : '20';\r\n            const fullDate = yearPrefix + datePart;\r\n            const age = calculateAge(fullDate);\r\n            const gender = getGender(genderPart);\r\n            setMemberAge(age);\r\n            setMemberGender(gender);\r\n        } else {\r\n            setMemberAge('');\r\n            setMemberGender('');\r\n        }\r\n    };\r\n\r\n/* ----------------------------------아이디를 입력했을 때 그 값이 DB에 중복된 값이 없는지 미리 확인하고 true false 반환하여 중복 여부 확인 버튼에서 사용 ---------------------------------------------*/\r\n\r\n\r\n    const memberIdCheck = (inputId) => {\r\n    // inputId : 현재 입력한 ID 대입\r\n      setMemberId(inputId);\r\n    // 비동기로 아이디 중복 검사 수행\r\n    fetch(\"memberIdCheck?id=\" + inputId) // url 주소로 이동할 때 inputId 값을 들고 가서 비교하겠다.\r\n    .then(resp => resp.text())\r\n    .then(result => {\r\n\r\n      // 중복이 아닐 때 true, 중복이면 false\r\n      if(Number(result) === 0) \r\n        setMemberIdValidation(true);\r\n      else                     \r\n      setMemberIdValidation(false);\r\n    })\r\n  } \r\n  // -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n  // ****************************************************************** 아이디 중복 검사 버튼 및 아이디 정규식 모음 ************************************************************************\r\n    const duplicationIdCheck = () => { \r\n    if (!memberId.trim()) {\r\n        alert(\"아이디를 입력해주세요.\");\r\n        return;\r\n    } \r\n    if (consonantVowelRegex.test(memberId)) {\r\n        alert(\"올바른 형식으로 입력해주세요.\");\r\n        setMemberIdValidation(false);\r\n        return;\r\n    }\r\n    if(memberId.length < 8 || memberId.length > 15){\r\n        alert(\"올바르지 않은 형식입니다.\");\r\n        return;\r\n    }    \r\n    if(memberIdValidation){\r\n        alert(\"사용 가능한 아이디입니다.\");\r\n    } else {\r\n        alert(\"중복 되는 아이디가 존재합니다.\");\r\n        return;\r\n    }\r\n    }\r\n    const emailHandleChange = (e) => {\r\n        setMemberEmail(e.target.value);\r\n    };\r\n    // *******************************************************************************************************************************************************************************\r\n    \r\n    /* 이메일 중복 검사 */\r\n    const emailCheck = () => {\r\n        // 이메일 입력 여부 확인\r\n        if (memberEmail.length === 0) {\r\n            alert(\"이메일을 입력해주세요.\");\r\n            return;\r\n        }\r\n    \r\n        // 이메일 중복 검사 요청\r\n        axios.post(\"/memberEmailCheck?email=\" + memberEmail)\r\n            .then(response => {\r\n                // 중복 여부 판별\r\n                if (Number(response.data) !== 0) {\r\n                    setEmailPlug(true);\r\n                    alert(\"중복되는 이메일이 존재합니다.\");\r\n                } else {\r\n                    setEmailPlug(false);\r\n                    alert(\"사용 가능한 이메일입니다.\");\r\n                }\r\n            })\r\n            .catch(err => {\r\n                alert(\"Error : \" + err);\r\n            });\r\n    };\r\n    // ---------------------------------------------------------------------[!회원가입 버튼!]----------------------------------------------------------------------------------------------\r\n   \r\n   \r\n    const MemberSignUpButton = () => {\r\n        \r\n        //아이디가 유효하지 않을 때 \r\n        if(!memberIdValidation){\r\n            alert(\"아이디 중복 검사를 확인 해주세요. \");\r\n            return;\r\n        }\r\n        if(emailPlug === null){\r\n            alert(\"이메일 중복 검사를 확인 해주세요.\");\r\n            return;\r\n        }\r\n        \r\n        // 비밀번호 공백 불가\r\n        if(!memberPw || !memberPwCheck){\r\n            alert(\"비밀번호를 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 비밀번호가 불일치\r\n        if(memberPw !== memberPwCheck){\r\n            alert(\"비밀번호가 일치하지 않습니다.\");\r\n            return;\r\n        }\r\n        // 비밀번호 정규식\r\n        if(!passwordRegex.test(memberPw) || !passwordRegex.test(memberPwCheck)){\r\n            alert(\"비밀번호를 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이름 공백 불가\r\n        if(!memberName.trim()){\r\n            alert(\"이름을 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이름 정규식 \r\n        if (!nameRegex.test(memberName)) {\r\n            alert(\"이름을 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 주민번호 공백 불가\r\n        if(!memberBirth.trim()){\r\n            alert(\"생년월일을 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 주민번호 정규식 \r\n        if (!birthRegex.test(memberBirth)) {\r\n            alert(\"생년월일 형식을 올바르게 입력해주세요. (oooooo-o)\");\r\n            return;\r\n        }\r\n        // 전화번호 공백 불가\r\n        if(!memberPhone){\r\n            alert(\"전화번호를 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 전화번호 정규식 \r\n        if (!phoneRegex.test(memberPhone)) {\r\n            alert(\"전화번호를 올바른 형식으로 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이메일 공백 불가\r\n        if(!memberEmail.trim()){\r\n            alert(\"이메일을 입력해주세요.\");\r\n            return;\r\n        }\r\n        // 이메일 정규식\r\n        if(!emailRegex.test(memberEmail)){\r\n            alert(\"이메일이 형식을 올바르게 입력해주세요.\");\r\n            return;\r\n        }\r\n        \r\n        // **************************************************************   사용자 입력 정보의 집합   ***********************************************************************\r\n        const memberInputInfo = {};\r\n        memberInputInfo.memberId = memberId;\r\n        memberInputInfo.memberPw = memberPw;\r\n        memberInputInfo.memberPwCheck = memberPwCheck;\r\n        memberInputInfo.memberName = memberName;\r\n        memberInputInfo.memberAge = memberAge;\r\n        memberInputInfo.memberGender = memberGender;\r\n        memberInputInfo.memberBirth = memberBirth;\r\n        memberInputInfo.memberEmail = memberEmail;\r\n        memberInputInfo.memberAddress = memberAddress;\r\n        memberInputInfo.memberPhone = memberPhone;\r\n        /*********************************************************************************************************************************************************************/\r\n       \r\n        \r\n  // ****************************************************************** 회원 가입 INPUT 정보 Controller 로 보내는 Fetch ***********************************************************************      \r\n        fetch(\"/memberSignUp\", {\r\n            method : \"POST\",\r\n            headers : {\"Content-Type\" : \"application/json\"},\r\n            body : JSON.stringify(memberInputInfo)\r\n        })\r\n        .then(response => response.text())\r\n        .then(result => {\r\n\r\n            if(Number(result) > 0){\r\n                alert(\"회원 가입이 완료되었습니다.\");\r\n                \r\n                setMemberId(\"\")\r\n                setMemberPw(\"\")\r\n                setMemberPwCheck(\"\")\r\n                setMemberName(\"\")\r\n                setMemberAge(\"\")\r\n                setMemberGender(\"\")\r\n                setMemberBirth(\"\")\r\n                setMemberEmail(\"\")\r\n                setMemberAddress(\"\")\r\n                setMemberPhone(\"\")\r\n                \r\n                navigate('/'); \r\n            } else {\r\n                alert(\"회원 가입이 실패하였습니다.\");\r\n            }\r\n        })\r\n    }\r\n    // *************************************************************************************************************************************************************************************\r\n    return (\r\n        <>\r\n        <h1 className=\"title-ID\">회원가입</h1>\r\n        <div className=\"login-container6\">\r\n        \r\n        {/*-------------------------------------------------------------------------- 아이디 --------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberId} className={memberIdValidation ? \"\" : \"memberId-error\"}  \r\n            onChange={e => {memberIdCheck(e.target.value)}} placeholder=\"아이디를 입력해주세요.\" required/>\r\n        </div>\r\n        {memberId && ( \r\n        idRegex.test(memberId) ? (\r\n            <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>\r\n                올바른 형식입니다.\r\n            </p>\r\n        ) : (\r\n            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                8 ~ 15 자 영문 또는 숫자를 입력해주세요.\r\n            </p>\r\n        )\r\n        )}\r\n        <div>\r\n         <button className=\"btn btn-dark\" onClick={duplicationIdCheck}>아이디 중복 확인</button>\r\n         </div>\r\n        {/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n\r\n        {/*************************************************************************** 비밀번호 ********************************************************************************/ }\r\n        <div className=\"input-value\">\r\n            <input type=\"password\" value={memberPw} \r\n            onChange={e => setMemberPw(e.target.value)} placeholder=\"비밀번호를 입력해주세요.\" required/>\r\n        </div>\r\n\r\n        <div className=\"input-value\">\r\n            <input type=\"password\" value={memberPwCheck} \r\n            onChange={e => setMemberPwCheck(e.target.value)} placeholder=\"비밀번호를 재 입력해주세요.\" required/>\r\n        </div>\r\n         \r\n         {isInputFilled && (\r\n            <>\r\n                {isPasswordValid && arePasswordsMatching ? (\r\n                    <p style={{ color: \"green\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치합니다.</p>\r\n                ) : (\r\n                    <>\r\n                        {!arePasswordsMatching && (\r\n                            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>비밀번호가 일치하지 않습니다.</p>\r\n                        )}\r\n                        {!isPasswordValid && (\r\n                            <p style={{ color: \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                                비밀번호는 10 ~ 15 자, 특수문자를 포함해야 합니다.\r\n                            </p>\r\n                        )}\r\n                    </>\r\n                )}\r\n            </>\r\n        )}\r\n         {/********************************************************************************************************************************************************************/ }\r\n\r\n        {/*-------------------------------------------------------------------------- 이름 --------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberName} \r\n            onChange={nameHandleChange} placeholder=\"이름을 입력해주세요.\" required/>\r\n        </div>\r\n        {memberName && (\r\n        <p style={{\r\n                color: nameRegex.test(memberName) ? \"green\" : \"red\",\r\n                margin: \"0\",\r\n                fontSize: \"13px\"}}>\r\n                {inputType === \"korean\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\"\r\n                    : inputType === \"english\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"영어 5 ~ 15 글자 입력해주세요.\"\r\n                    : \"언어: 한글 / 영어\"}\r\n        </p>\r\n    )}\r\n     {/*---------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n\r\n\r\n     {/* ******************************************************************** 주민번호 ************************************************************************** */}\r\n             <div>\r\n            <input\r\n                type=\"text\"\r\n                value={memberBirth}\r\n                onChange={birthHandleChange}\r\n                placeholder=\"주민번호 7자리를 입력해주세요 / (-) 자동 생성\"\r\n                required\r\n                maxLength=\"8\" // 하이픈 포함 최대 8자리\r\n            />\r\n            {memberBirth && (\r\n                <p style={{ color: (birthRegex.test(memberBirth) && isDateValid(memberBirth)) ? \"green\" : \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                    {birthRegex.test(memberBirth) && isDateValid(memberBirth) ? \r\n                        `올바른 형식입니다.` : \r\n                        \"형식이 올바르지 않습니다.\"}\r\n                </p>\r\n            )}\r\n        </div>\r\n    {/* ****************************************************************************************************************************************************************** */}\r\n            \r\n    {/*----------------------------------------------------------------------------전화번호-----------------------------------------------------------------------------------------*/}\r\n        <div className=\"input-value\">\r\n            <input type=\"text\" value={memberPhone} \r\n            onChange={phoneHandleChange} \r\n            placeholder=\"전화번호를 입력해주세요.\" required\r\n            />\r\n        </div>\r\n        {memberPhone && (\r\n                <p\r\n                    style={{\r\n                        color: phoneRegex.test(memberPhone) ? \"green\" : \"red\",\r\n                        margin: \"0\",\r\n                        fontSize: \"13px\"\r\n                    }}\r\n                >\r\n                    {phoneRegex.test(memberPhone)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"전화번호 010-****-****\"}\r\n                </p>\r\n            )}\r\n    {/*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/}\r\n       \r\n     {/* ********************************************************************** 주소 ************************************************************************** */}\r\n        <div className=\"input-value\">\r\n            <AddressSearch onAddressChange={handleAddressChange}/>\r\n        </div>\r\n     {/* ******************************************************************************************************************************************************** */}\r\n\r\n     {/* ------------------------------------------------------------------- 이메일 ------------------------------------------------------------------------------ */}\r\n        <div className=\"input-value\">\r\n            <input\r\n                type=\"text\"\r\n                value={memberEmail}\r\n                onChange={emailHandleChange}\r\n                placeholder=\"이메일을 입력해주세요.\"\r\n                required\r\n            />\r\n            {memberEmail && (\r\n                <p\r\n                    style={{\r\n                        color: emailRegex.test(memberEmail) ? \"green\" : \"red\",\r\n                        margin: \"0\",\r\n                        fontSize: \"13px\"\r\n                    }}\r\n                >\r\n                    {emailRegex.test(memberEmail)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"유효한 이메일 주소를 입력해주세요.\"}\r\n                </p>\r\n            )}\r\n            <div className=\"input-value\">\r\n            <button className=\"btn btn-dark\" onClick={emailCheck}>이메일 중복 확인</button>\r\n            </div>\r\n        </div>\r\n    {/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------- */}\r\n   \r\n        \r\n        <div className=\"input-value\">\r\n            <button type=\"submit\" className=\"btn btn-dark\" onClick={MemberSignUpButton}>회원가입</button>\r\n        </div>\r\n        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default MemberSignUp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}