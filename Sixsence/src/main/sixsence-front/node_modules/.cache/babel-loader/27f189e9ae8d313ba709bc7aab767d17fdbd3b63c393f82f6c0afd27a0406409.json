{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate,Link}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const RegisterCheck=()=>{const[memberCheck,setMemberCheck]=useState(null);const[memberName,setMemberName]=useState(\"\");const[memberBirth,setMemberBirth]=useState(\"\");const[memberPhone,setMemberPhone]=useState(\"\");const[changeTrick,setChangeTrick]=useState(false);// 이름 정규식에서 한글 : 영어 구분\nconst[inputType,setInputType]=useState(\"none\");// 정규식\nconst nameRegex=/^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;const birthRegex=/^\\d{6}-[1-4]$/;const phoneRegex=/^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;const navigate=useNavigate();// 이름 핸들러\nconst nameHandleChange=e=>{const value=e.target.value;const firstChar=value.charAt(0);// 첫 번째 문자에 따라 입력 타입 설정\nif(/^[ㄱ-힇]$/.test(firstChar)){setInputType(\"korean\");}else if(/^[a-zA-Z]$/.test(firstChar)){setInputType(\"english\");}// 입력 타입에 맞게 값 필터링\nif(inputType===\"korean\"&&/^[ㄱ-힣]*$/.test(value)){setMemberName(value);}else if(inputType===\"english\"&&/^[a-zA-Z]*$/.test(value)){setMemberName(value);}else if(inputType===\"none\"){setMemberName(value);// 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\n}};// *****************************************전화번호 형식 ********************************************\nconst formatPhoneNumber=value=>{const cleanedPhone=value.replace(/\\D/g,'');if(cleanedPhone.length<=3){return cleanedPhone;}if(cleanedPhone.length<=7){return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3)}`;}return`${cleanedPhone.slice(0,3)}-${cleanedPhone.slice(3,7)}-${cleanedPhone.slice(7,11)}`;};// 전화번호 핸들러\nconst phoneHandleChange=e=>{const formattedPhoneNumber=formatPhoneNumber(e.target.value);setMemberPhone(formattedPhoneNumber);};// *******************************************************************************************************\n//---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\n// 날짜 유효성 검사 함수\nconst isDateValid=birthDate=>{const[datePart,genderPart]=birthDate.split('-');// 날짜 부분이 올바른지 확인\nif(datePart.length!==6||!/^\\d{6}$/.test(datePart)||!/^[1-4]$/.test(genderPart)){return false;}// 연도, 월, 일 추출\nconst yy=parseInt(datePart.slice(0,2),10);const mm=parseInt(datePart.slice(2,4),10);const dd=parseInt(datePart.slice(4,6),10);// YY를 YYYY로 변환\nconst year=yy>=0&&yy<=99?yy<30?2000+yy:1900+yy:yy;// 월과 일 유효성 검사\nif(mm<1||mm>12)return false;// 월이 1~12 사이인지 확인\n// 월에 따라 일자 유효성 검사\nconst daysInMonth=new Date(year,mm,0).getDate();if(dd<1||dd>daysInMonth)return false;// 일자가 월의 일수 범위 내인지 확인\nreturn true;};const birthHandleChange=e=>{let value=e.target.value;// 숫자만 허용\nvalue=value.replace(/[^\\d]/g,'');// 하이픈 추가\nif(value.length>6){value=value.slice(0,6)+'-'+value.slice(6,7);}setMemberBirth(value);};// ----------------------------------------------------------------------------------------------------------------------------------------\n// 가입여부 확인 버튼!\nconst registerCheckButton=()=>{// 정규식 이름 생년월일 전화번호 정의\nif(!nameRegex.test(memberName)){alert(\"이름을 올바르게 입력해주세요.\");return;}if(!birthRegex.test(memberBirth)){alert(\"생년월일을 올바르게 입력해주세요. * 예) 950101-1\");return;}if(!phoneRegex.test(memberPhone)){alert(\"전화번호를 올바르게 입력해주세요.\");return;}fetch(\"/register-check\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"},body:JSON.stringify({memberName,memberBirth,memberPhone})}).then(response=>{if(!response.ok){throw new Error(\"서버 응답이 실패하였습니다.\");}return response.json();}).then(data=>{if(data){setMemberCheck(data);alert(\"가입된 아이디가 존재합니다.\");setChangeTrick(true);return;}}).catch(error=>{console.error(\"Fetch error:\",error);alert(\"가입되지 않은 사용자입니다. 회원가입 페이지로 이동합니다.\");navigate(\"/memberSignup\");});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title-ID\",children:\"\\uD68C\\uC6D0\\uAC00\\uC785 \\uC5EC\\uBD80 \\uD655\\uC778\"}),/*#__PURE__*/_jsx(\"div\",{className:\"login-container5\",children:!changeTrick?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberName,onChange:nameHandleChange,placeholder:\"\\uC774\\uB984\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberName&&/*#__PURE__*/_jsx(\"p\",{style:{color:nameRegex.test(memberName)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:inputType===\"korean\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\":inputType===\"english\"?nameRegex.test(memberName)?\"올바른 형식입니다.\":\"영어 5 ~ 15 글자 입력해주세요.\":\"언어: 한글 / 영어\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberBirth,onChange:birthHandleChange,placeholder:\"\\uC8FC\\uBBFC\\uBC88\\uD638 7\\uC790\\uB9AC\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694 / (-) \\uC790\\uB3D9 \\uC0DD\\uC131\",required:true,maxLength:\"8\"// 하이픈 포함 최대 8자리\n}),memberBirth&&/*#__PURE__*/_jsx(\"p\",{style:{color:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:birthRegex.test(memberBirth)&&isDateValid(memberBirth)?`올바른 형식입니다.`:\"형식이 올바르지 않습니다.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:memberPhone,onChange:phoneHandleChange,placeholder:\"\\uC804\\uD654\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",required:true})}),memberPhone&&/*#__PURE__*/_jsx(\"p\",{style:{color:phoneRegex.test(memberPhone)?\"green\":\"red\",margin:\"0\",fontSize:\"13px\"},children:phoneRegex.test(memberPhone)?\"올바른 형식입니다.\":\"전화번호 010-****-****\"}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",type:\"button\",onClick:registerCheckButton,children:\"\\uAC00\\uC785\\uC5EC\\uBD80 \\uD655\\uC778\"})})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD68C\\uC6D0\\uAC00\\uC785\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"login-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsxs(\"h3\",{children:[memberCheck.memberName,\"\\uB2D8! \\uC774\\uBBF8 \\uD68C\\uC6D0\\uC73C\\uB85C \\uB4F1\\uB85D\\uB418\\uC5B4 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-value\",children:[/*#__PURE__*/_jsxs(\"h5\",{children:[\"\\uD68C\\uC6D0\\uC544\\uC774\\uB514 : (\",memberCheck.memberId,\") \\uC870\\uD68C \\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"]}),/*#__PURE__*/_jsx(\"h5\",{children:\"\\uB85C\\uADF8\\uC778 \\uB610\\uB294 \\uBE44\\uBC00\\uBC88\\uD638 \\uCC3E\\uAE30\\uB97C \\uC9C4\\uD589\\uD574 \\uC8FC\\uC138\\uC694.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(Link,{to:\"/memberLogin\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",children:\"\\uB85C\\uADF8\\uC778\"})})}),/*#__PURE__*/_jsx(\"div\",{className:\"input-value\",children:/*#__PURE__*/_jsx(Link,{to:\"/passwordFind\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-dark\",children:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uCC3E\\uAE30\"})})})]})]})})]});};export default RegisterCheck;","map":{"version":3,"names":["React","useState","useNavigate","Link","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","RegisterCheck","memberCheck","setMemberCheck","memberName","setMemberName","memberBirth","setMemberBirth","memberPhone","setMemberPhone","changeTrick","setChangeTrick","inputType","setInputType","nameRegex","birthRegex","phoneRegex","navigate","nameHandleChange","e","value","target","firstChar","charAt","test","formatPhoneNumber","cleanedPhone","replace","length","slice","phoneHandleChange","formattedPhoneNumber","isDateValid","birthDate","datePart","genderPart","split","yy","parseInt","mm","dd","year","daysInMonth","Date","getDate","birthHandleChange","registerCheckButton","alert","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","catch","error","console","children","className","type","onChange","placeholder","required","style","color","margin","fontSize","maxLength","onClick","memberId","to"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/login/RegisterCheck.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, Link } from 'react-router-dom';\r\n\r\nconst RegisterCheck = () => {\r\n    const [memberCheck, setMemberCheck] = useState(null);\r\n    const [memberName, setMemberName] = useState(\"\");\r\n    const [memberBirth, setMemberBirth] = useState(\"\");\r\n    const [memberPhone, setMemberPhone] = useState(\"\");\r\n    const [changeTrick, setChangeTrick] = useState(false);\r\n\r\n    // 이름 정규식에서 한글 : 영어 구분\r\n    const [inputType, setInputType] = useState(\"none\");\r\n\r\n    // 정규식\r\n    const nameRegex = /^[가-힣]{1,6}$|^[a-zA-Z\\s\\-]{5,15}$/;\r\n    const birthRegex = /^\\d{6}-[1-4]$/;\r\n    const phoneRegex = /^(01[016789])[-\\s]?\\d{3,4}[-\\s]?\\d{4}$/;\r\n    \r\n    const navigate = useNavigate();\r\n\r\n   // 이름 핸들러\r\n   const nameHandleChange = (e) => {\r\n    const value = e.target.value;\r\n    const firstChar = value.charAt(0);\r\n    // 첫 번째 문자에 따라 입력 타입 설정\r\n    if (/^[ㄱ-힇]$/.test(firstChar)) {\r\n        setInputType(\"korean\");\r\n    } else if (/^[a-zA-Z]$/.test(firstChar)) {\r\n        setInputType(\"english\");\r\n    }\r\n\r\n    // 입력 타입에 맞게 값 필터링\r\n    if (inputType === \"korean\" && /^[ㄱ-힣]*$/.test(value)) {\r\n        setMemberName(value);\r\n    } else if (inputType === \"english\" && /^[a-zA-Z]*$/.test(value)) {\r\n        setMemberName(value);\r\n    } else if (inputType === \"none\") {\r\n        setMemberName(value);  // 입력 타입이 설정되지 않은 경우에는 입력을 허용합니다.\r\n    }\r\n};\r\n\r\n    // *****************************************전화번호 형식 ********************************************\r\n    const formatPhoneNumber = (value) => {\r\n        const cleanedPhone = value.replace(/\\D/g, '');\r\n        \r\n        if (cleanedPhone.length <= 3) {\r\n            return cleanedPhone;\r\n        }\r\n        if (cleanedPhone.length <= 7) {\r\n            return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3)}`;\r\n        }\r\n        return `${cleanedPhone.slice(0, 3)}-${cleanedPhone.slice(3, 7)}-${cleanedPhone.slice(7, 11)}`;\r\n    };\r\n\r\n    // 전화번호 핸들러\r\n    const phoneHandleChange = (e) => {\r\n        const formattedPhoneNumber = formatPhoneNumber(e.target.value);\r\n        setMemberPhone(formattedPhoneNumber);\r\n    };\r\n    // *******************************************************************************************************\r\n\r\n    //---------------------------------------------주민번호 날짜 관련 정규식 부가적인 요소------------------------------------------------\r\n// 날짜 유효성 검사 함수\r\nconst isDateValid = (birthDate) => {\r\n    const [datePart, genderPart] = birthDate.split('-');\r\n    \r\n    // 날짜 부분이 올바른지 확인\r\n    if (datePart.length !== 6 || !/^\\d{6}$/.test(datePart) || !/^[1-4]$/.test(genderPart)) {\r\n        return false;\r\n    }\r\n    \r\n    // 연도, 월, 일 추출\r\n    const yy = parseInt(datePart.slice(0, 2), 10);\r\n    const mm = parseInt(datePart.slice(2, 4), 10);\r\n    const dd = parseInt(datePart.slice(4, 6), 10);\r\n    \r\n    // YY를 YYYY로 변환\r\n    const year = yy >= 0 && yy <= 99 ? (yy < 30 ? 2000 + yy : 1900 + yy) : yy;\r\n    \r\n    // 월과 일 유효성 검사\r\n    if (mm < 1 || mm > 12) return false; // 월이 1~12 사이인지 확인\r\n    \r\n    // 월에 따라 일자 유효성 검사\r\n    const daysInMonth = new Date(year, mm, 0).getDate();\r\n    if (dd < 1 || dd > daysInMonth) return false; // 일자가 월의 일수 범위 내인지 확인\r\n    \r\n    return true;\r\n};\r\nconst birthHandleChange = (e) => {\r\n    let value = e.target.value;\r\n    \r\n    // 숫자만 허용\r\n    value = value.replace(/[^\\d]/g, '');\r\n    \r\n    // 하이픈 추가\r\n    if (value.length > 6) {\r\n        value = value.slice(0, 6) + '-' + value.slice(6, 7);\r\n    }\r\n    \r\n    setMemberBirth(value);\r\n}\r\n// ----------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    // 가입여부 확인 버튼!\r\n    const registerCheckButton = () => {\r\n       \r\n        // 정규식 이름 생년월일 전화번호 정의\r\n        if (!nameRegex.test(memberName)) {\r\n            alert(\"이름을 올바르게 입력해주세요.\");\r\n            return;\r\n        }\r\n        if (!birthRegex.test(memberBirth)) {\r\n            alert(\"생년월일을 올바르게 입력해주세요. * 예) 950101-1\");\r\n            return;\r\n        }\r\n        if (!phoneRegex.test(memberPhone)) {\r\n            alert(\"전화번호를 올바르게 입력해주세요.\");\r\n            return;\r\n        }\r\n\r\n        fetch(\"/register-check\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ memberName, memberBirth, memberPhone })\r\n        })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(\"서버 응답이 실패하였습니다.\");\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            if (data) {\r\n                setMemberCheck(data);\r\n                alert(\"가입된 아이디가 존재합니다.\");\r\n                setChangeTrick(true);\r\n                return;\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Fetch error:\", error);\r\n            alert(\"가입되지 않은 사용자입니다. 회원가입 페이지로 이동합니다.\");\r\n            navigate(\"/memberSignup\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <h1 className=\"title-ID\">회원가입 여부 확인</h1>\r\n        <div className=\"login-container5\">\r\n            \r\n            {!changeTrick ? (\r\n                <>\r\n                   \r\n                    <div className=\"input-value\">\r\n            <input type=\"text\" value={memberName} \r\n            onChange={nameHandleChange} placeholder=\"이름을 입력해주세요.\" required/>\r\n        </div>\r\n        {memberName && (\r\n        <p style={{\r\n                color: nameRegex.test(memberName) ? \"green\" : \"red\",\r\n                margin: \"0\",\r\n                fontSize: \"13px\"}}>\r\n                {inputType === \"korean\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"한글 1 ~ 6 글자 입력해주세요. *) 자음, 모음만 사용할 수 없습니다.\"\r\n                    : inputType === \"english\"\r\n                    ? nameRegex.test(memberName)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"영어 5 ~ 15 글자 입력해주세요.\"\r\n                    : \"언어: 한글 / 영어\"}\r\n        </p>\r\n    )}\r\n                    \r\n    {/* ******************************************************************** 주민번호 ************************************************************************** */}\r\n             <div>\r\n            <input\r\n                type=\"text\"\r\n                value={memberBirth}\r\n                onChange={birthHandleChange}\r\n                placeholder=\"주민번호 7자리를 입력해주세요 / (-) 자동 생성\"\r\n                required\r\n                maxLength=\"8\" // 하이픈 포함 최대 8자리\r\n            />\r\n            {memberBirth && (\r\n                <p style={{ color: (birthRegex.test(memberBirth) && isDateValid(memberBirth)) ? \"green\" : \"red\", margin: \"0\", fontSize: \"13px\" }}>\r\n                    {birthRegex.test(memberBirth) && isDateValid(memberBirth) ? \r\n                        `올바른 형식입니다.` : \r\n                        \"형식이 올바르지 않습니다.\"}\r\n                </p>\r\n            )}\r\n        </div>\r\n    {/* ****************************************************************************************************************************************************************** */}\r\n    <div className=\"input-value\">\r\n            <input type=\"text\" value={memberPhone} \r\n            onChange={phoneHandleChange} \r\n            placeholder=\"전화번호를 입력해주세요.\" required\r\n            />\r\n        </div>\r\n        {memberPhone && (\r\n                <p\r\n                    style={{\r\n                        color: phoneRegex.test(memberPhone) ? \"green\" : \"red\",\r\n                        margin: \"0\",\r\n                        fontSize: \"13px\"\r\n                    }}\r\n                >\r\n                    {phoneRegex.test(memberPhone)\r\n                        ? \"올바른 형식입니다.\"\r\n                        : \"전화번호 010-****-****\"}\r\n                </p>\r\n            )}\r\n                    <div className=\"input-value\">\r\n                        <button className=\"btn btn-dark\" type=\"button\" onClick={registerCheckButton}>\r\n                            가입여부 확인\r\n                        </button>\r\n                    </div>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <div className='input-value'>\r\n                        <h1>회원가입</h1>\r\n                    </div>\r\n                    <div className='login-container'>\r\n                        <div className=\"input-value\">\r\n                            <h3>{memberCheck.memberName}님! 이미 회원으로 등록되어 있습니다.</h3>\r\n                        </div>\r\n                        <div className=\"input-value\">\r\n                            <h5>회원아이디 : ({memberCheck.memberId}) 조회 되었습니다.</h5>\r\n                            <h5>로그인 또는 비밀번호 찾기를 진행해 주세요.</h5>\r\n                        </div>\r\n                        <div className=\"input-value\">\r\n                            <Link to=\"/memberLogin\"><button className='btn btn-dark'>로그인</button></Link>\r\n                        </div>\r\n                        <div className=\"input-value\">\r\n                            <Link to=\"/passwordFind\"><button className=\"btn btn-dark\">비밀번호 찾기</button></Link>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterCheck;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}