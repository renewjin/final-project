{"ast":null,"code":"import{useState,useEffect,useContext}from'react';import axios from'axios';import LoginContext from'../login/LoginContext';import{useNavigate}from'react-router-dom';const useCart=()=>{const{loginMember}=useContext(LoginContext);const[cartItems,setCartItems]=useState([]);const navigate=useNavigate();const[cartItemCount,setCartItemCount]=useState(0);//sessionStorage.setItem('cartUpdated', cartItems.length);\n//console.log(\"cartItems!!!!!!!!! \", cartItems);\nuseEffect(()=>{setCartItemCount(cartItems.length);},[cartItems]);// 서버에서 장바구니 데이터 가져오기\nconst fetchCartItems=async()=>{if(!loginMember)return;try{const response=await axios.get('/getusercart',{params:{memberNo:loginMember.memberNo}});setCartItems(response.data);}catch(error){console.error('장바구니 데이터를 가져오는데 오류발생:',error);}};useEffect(()=>{fetchCartItems();},[loginMember]);// 서버에 장바구니 데이터 추가\nconst addCartItem=async item=>{if(!loginMember){// 로그인 했을 때\nconst shouldNavigate=window.confirm(\"로그인이 필요합니다. 로그인 페이지로 이동하시겠습니까?\");if(shouldNavigate){// 확인버튼\nnavigate('/memberLogin');return;}else{// 취소버튼\nreturn;}}// 기존데이터이 있는 아이템인지 확인\nconst existingItem=cartItems.find(cartItem=>cartItem.itemNo===item.itemNo);if(existingItem){alert(\"이미 장바구니에 있는 상품입니다.\");return;}const cartObj={itemNo:item.itemNo,memberNo:loginMember.memberNo,shoppingCount:item.shoppingCount||1,//item.shoppingCount 가 있으면 사용 없으면 1\nshoppingPrice:item.shoppingPrice||item.itemPrice//item.shoppingPrice 가 있으면 사용 없으면 item.itemPrice값 사용\n};try{await axios.post(\"/add-cart\",cartObj,{headers:{\"Content-Type\":\"application/json\"}});await fetchCartItems();alert(\"장바구니에 추가되었습니다.\");//window.dispatchEvent(new Event('cartUpdated'));  // 이벤트 생성\n}catch(error){console.error(\"장바구니 DB 추가 실패:\",error);}};// 기존 장바구니 데이터 업데이트(수량, 가격)\nconst updateCartItem=async(shoppingNo,quantity)=>{//console.log(\"shoppingNo\", shoppingNo)\n//console.log(\"cartItems\", cartItems)\nif(quantity<1||quantity>9)return;const updatedItem=cartItems.find(item=>item.shoppingNo===shoppingNo);if(!updatedItem)return;try{await axios.put('/update-cart-item',{// 데이터 수정\nshoppingNo:shoppingNo,shoppingCount:quantity,shoppingPrice:updatedItem.itemPrice*quantity});// 상태변수를 사용하여 해당장바구니의 수량과 가격 업데이트\n// 기존 장바구니변수를 for루프를 item변수로 돌면서 해당 장바구니에 해당하면\nsetCartItems(cartItems.map(item=>item.shoppingNo===shoppingNo?{...item,shoppingCount:quantity,shoppingPrice:item.itemPrice*quantity}:item));}catch(error){console.error('장바구니 업데이트 실패',error);}};const deleteCartItem=async shoppingNo=>{//console.log(\"123123shoppingNo\", shoppingNo);\nconst deleteItem=cartItems.find(item=>item.shoppingNo===shoppingNo);//console.log(\"deleteItem : \",deleteItem)\nif(!deleteItem)return;try{//await axios.delete('/delete-cart-item?shoppingNo='+shoppingNo);\nawait axios.delete('/delete-cart-item',{params:{shoppingNo:shoppingNo}});setCartItems(cartItems.filter(item=>item.shoppingNo!==shoppingNo));//window.dispatchEvent(new Event('cartUpdated'));  // 커스텀 이벤트 트리거\n}catch(error){console.error('장바구니 아이템 삭제 실패:',error);}//console.log(\"cartItems!!!!!!!!!!!! \", cartItems);\n};const selectedDeleteCartItem=async shoppingNoList=>{//console.log(\"shoppingNoList : \", shoppingNoList);\ntry{/*\r\n            shoppingNoList.forEach(async (shoppingNo) => {\r\n                await axios.delete('/delete-cart-item', {\r\n                    params: { shoppingNo }\r\n                });\r\n            });\r\n            */// Promise.all을 사용하지 않으면 forEach문 활용\n// Promise.all 을 사용해 병렬로 삭제 요청을 보낼수 있음(비동기처리)\n// Promise.all 주로 배열을 인자로 받아서 인자로 받은 반복가능한 객체들을 순회하면서 비동기 작업들을 처리\nawait Promise.all(shoppingNoList.map(shoppingNo=>axios.delete('/delete-cart-item',{params:{shoppingNo}})));// shoppingNoList에 포함되지 않는 shoppingNo만 걸러서 cartitems에 담기\nsetCartItems(cartItems.filter(item=>!shoppingNoList.includes(item.shoppingNo)));alert(\"선택된 상품이 삭제되었습니다.\");}catch(error){console.error('선택된 아이템 삭제 실패',error);}};return{cartItems,addCartItem,updateCartItem,deleteCartItem,selectedDeleteCartItem,fetchCartItems,cartItemCount};};export default useCart;","map":{"version":3,"names":["useState","useEffect","useContext","axios","LoginContext","useNavigate","useCart","loginMember","cartItems","setCartItems","navigate","cartItemCount","setCartItemCount","length","fetchCartItems","response","get","params","memberNo","data","error","console","addCartItem","item","shouldNavigate","window","confirm","existingItem","find","cartItem","itemNo","alert","cartObj","shoppingCount","shoppingPrice","itemPrice","post","headers","updateCartItem","shoppingNo","quantity","updatedItem","put","map","deleteCartItem","deleteItem","delete","filter","selectedDeleteCartItem","shoppingNoList","Promise","all","includes"],"sources":["C:/Users/user1/Desktop/sixsence/Sixsence/src/main/sixsence-front/src/hooks/useCart.js"],"sourcesContent":["import { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport LoginContext from '../login/LoginContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst useCart = () => {\r\n    const { loginMember } = useContext(LoginContext);\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const navigate = useNavigate();\r\n    const [cartItemCount, setCartItemCount] = useState(0);\r\n    //sessionStorage.setItem('cartUpdated', cartItems.length);\r\n\r\n    //console.log(\"cartItems!!!!!!!!! \", cartItems);\r\n\r\n    useEffect(()=> {\r\n        setCartItemCount(cartItems.length)\r\n    }, [cartItems])\r\n\r\n    // 서버에서 장바구니 데이터 가져오기\r\n    const fetchCartItems = async () => {\r\n        if (!loginMember) return;\r\n        \r\n        try {\r\n            const response = await axios.get('/getusercart', { params: { memberNo: loginMember.memberNo } });\r\n            setCartItems(response.data);\r\n        } catch (error) {\r\n            console.error('장바구니 데이터를 가져오는데 오류발생:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchCartItems();\r\n    }, [loginMember]);\r\n\r\n    // 서버에 장바구니 데이터 추가\r\n    const addCartItem = async (item) => {\r\n        if (!loginMember) { // 로그인 했을 때\r\n            const shouldNavigate = window.confirm(\"로그인이 필요합니다. 로그인 페이지로 이동하시겠습니까?\");\r\n            if (shouldNavigate) { // 확인버튼\r\n                navigate('/memberLogin');\r\n                return;\r\n            } else { // 취소버튼\r\n                return\r\n            }\r\n        }\r\n\r\n        // 기존데이터이 있는 아이템인지 확인\r\n        const existingItem = cartItems.find(cartItem => cartItem.itemNo === item.itemNo);\r\n        if (existingItem) {\r\n            alert(\"이미 장바구니에 있는 상품입니다.\");\r\n            return;\r\n        }\r\n\r\n        const cartObj = {\r\n            itemNo: item.itemNo,\r\n            memberNo: loginMember.memberNo,\r\n            shoppingCount: item.shoppingCount || 1, //item.shoppingCount 가 있으면 사용 없으면 1\r\n            shoppingPrice: item.shoppingPrice || item.itemPrice //item.shoppingPrice 가 있으면 사용 없으면 item.itemPrice값 사용\r\n        };\r\n\r\n        try {\r\n            await axios.post(\"/add-cart\", cartObj, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                }\r\n            });\r\n            await fetchCartItems();\r\n            alert(\"장바구니에 추가되었습니다.\");\r\n            //window.dispatchEvent(new Event('cartUpdated'));  // 이벤트 생성\r\n        } catch (error) {\r\n            console.error(\"장바구니 DB 추가 실패:\", error);\r\n        }\r\n    };\r\n\r\n    // 기존 장바구니 데이터 업데이트(수량, 가격)\r\n    const updateCartItem = async (shoppingNo, quantity) => {\r\n        //console.log(\"shoppingNo\", shoppingNo)\r\n        //console.log(\"cartItems\", cartItems)\r\n        if (quantity < 1 || quantity > 9) return;\r\n\r\n        const updatedItem = cartItems.find(item => item.shoppingNo === shoppingNo);\r\n        if (!updatedItem) return;\r\n\r\n        try {\r\n            await axios.put('/update-cart-item', { // 데이터 수정\r\n                shoppingNo: shoppingNo,\r\n                shoppingCount: quantity,\r\n                shoppingPrice: updatedItem.itemPrice * quantity\r\n            });\r\n            // 상태변수를 사용하여 해당장바구니의 수량과 가격 업데이트\r\n            // 기존 장바구니변수를 for루프를 item변수로 돌면서 해당 장바구니에 해당하면\r\n            setCartItems(cartItems.map(item => \r\n                item.shoppingNo === shoppingNo ? \r\n                { ...item, shoppingCount: quantity, shoppingPrice: item.itemPrice * quantity } \r\n                : item\r\n            ));\r\n        } catch (error) {\r\n            console.error('장바구니 업데이트 실패', error);\r\n        }\r\n    };\r\n\r\n    const deleteCartItem = async (shoppingNo) => {\r\n        //console.log(\"123123shoppingNo\", shoppingNo);\r\n\r\n        const deleteItem = cartItems.find(item => item.shoppingNo === shoppingNo);\r\n        //console.log(\"deleteItem : \",deleteItem)\r\n        if(!deleteItem) return;\r\n\r\n        try {\r\n            //await axios.delete('/delete-cart-item?shoppingNo='+shoppingNo);\r\n            await axios.delete('/delete-cart-item', {\r\n                params: {shoppingNo: shoppingNo}\r\n            });\r\n            setCartItems(cartItems.filter(item => item.shoppingNo !== shoppingNo));\r\n\r\n            //window.dispatchEvent(new Event('cartUpdated'));  // 커스텀 이벤트 트리거\r\n        } catch (error) {\r\n            console.error('장바구니 아이템 삭제 실패:', error)\r\n        }\r\n        //console.log(\"cartItems!!!!!!!!!!!! \", cartItems);\r\n    }\r\n\r\n    const selectedDeleteCartItem = async (shoppingNoList) => {\r\n        //console.log(\"shoppingNoList : \", shoppingNoList);\r\n\r\n        try {\r\n            /*\r\n            shoppingNoList.forEach(async (shoppingNo) => {\r\n                await axios.delete('/delete-cart-item', {\r\n                    params: { shoppingNo }\r\n                });\r\n            });\r\n            */\r\n            // Promise.all을 사용하지 않으면 forEach문 활용\r\n            // Promise.all 을 사용해 병렬로 삭제 요청을 보낼수 있음(비동기처리)\r\n            // Promise.all 주로 배열을 인자로 받아서 인자로 받은 반복가능한 객체들을 순회하면서 비동기 작업들을 처리\r\n            await Promise.all(shoppingNoList.map(shoppingNo => \r\n                axios.delete('/delete-cart-item', { params: { shoppingNo } })\r\n            ));\r\n            \r\n            // shoppingNoList에 포함되지 않는 shoppingNo만 걸러서 cartitems에 담기\r\n            setCartItems(cartItems.filter(item => !shoppingNoList.includes(item.shoppingNo)));\r\n\r\n            alert(\"선택된 상품이 삭제되었습니다.\");\r\n        } catch (error) {\r\n            console.error('선택된 아이템 삭제 실패', error);\r\n        }\r\n    }\r\n\r\n    return {\r\n        cartItems,\r\n        addCartItem,\r\n        updateCartItem,\r\n        deleteCartItem,\r\n        selectedDeleteCartItem,\r\n        fetchCartItems,\r\n        cartItemCount\r\n    };\r\n};\r\n\r\nexport default useCart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}